name: Release Statically Linked Rust Binary

on:
  push:
    tags:
      - 'v*'  # Trigger on tags like 'v1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl       # Linux (musl)
          - aarch64-unknown-linux-musl      # ARM Linux (musl)

    env:
      BINARY_NAME: commr

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install Rust (Toolchain)
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Install Cross for cross-compilation
      - name: Install Cross
        run: cargo install cross

      # Step 4: Install target for cross-compilation
      - name: Install Target for Cross Compilation
        run: rustup target add ${{ matrix.target }}

      # Step 5: Build the binary using Cross
      - name: Build with Cross
        run: cross build --target ${{ matrix.target }} --release --verbose

      # Step 6: List files in the release directory for debugging purposes
      - name: List files in target directory
        run: |
          echo "Listing files in target/${{ matrix.target }}/release"
          ls -l target/${{ matrix.target }}/release

      # Step 7: Create Release Archive
      - name: Create Release Archive
        run: |
          mkdir -p release
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cp target/${{ matrix.target }}/release/$BINARY_NAME.exe release/
            zip -r ${{ matrix.target }}.zip release
          elif [[ "${{ matrix.target }}" == *"darwin"* ]]; then
            cp target/${{ matrix.target }}/release/$BINARY_NAME release/
            tar -czvf ${{ matrix.target }}.tar.gz -C release $BINARY_NAME
          else
            cp target/${{ matrix.target }}/release/$BINARY_NAME release/
            tar -czvf ${{ matrix.target }}.tar.gz -C release $BINARY_NAME
          fi

      # Step 8: List files in the release folder for debugging
      - name: List files in release folder
        run: ls -l release

      # Step 9: Upload Release Assets
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.tar.gz
            *.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
